// # 📝 [JavaScript] 멀리뛰기

// ## ▷ 문제 설명

// 효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
// (1칸, 1칸, 1칸, 1칸)
// (1칸, 2칸, 1칸)
// (1칸, 1칸, 2칸)
// (2칸, 1칸, 1칸)
// (2칸, 2칸)
// 의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요. 예를 들어 4가 입력된다면, 5를 return하면 됩니다.

// ## ▷ 제한사항

// - n은 1 이상, 2000 이하인 정수입니다.

// ## ▷ 입출력 예

// ```jsx
// solution(4) // 5
// solution(3) // 3
// ```

// ## ▷ 내 풀이

// ```jsx
// function solution(n) {
//   let dp = [0, 1, 2];
//   for(let i = 3; i < n; i++) {
//     dp[i] = (dp[i - 2] + dp[i - 1]) % 1234567 
//   }
//   return dp[n - 1]
// }
// ```

// ## ▷ 접근 방식
// dp를 활용하여 풀이했다. n이 1일때는 1, n이 2일때는 2가 나오기 때문에 1,2를 설정해주고 for문을 2번째 인덱스부터 돌려줬다. `dp[i] = dp[i - 2] + dp[i - 1]` 이기 때문에 거기에 1234567을 나눈 나머지 값을 구해줬다. return 할때 dp[n - 1]을 해준 이유는 인덱스로 접근해야 하기 때문이다.

// ---
// >
// 출처: [프로그래머스](https://school.programmers.co.kr/learn/courses/30/lessons/12914?language=javascript)
// >
